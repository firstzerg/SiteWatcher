<Window x:Class="SiteWatcher.AppWindow" 
xmlns:coll="clr-namespace:System.Collections.ObjectModel;assembly=WindowsBase" 
xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase" 
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
xmlns:sys="clr-namespace:System;assembly=mscorlib"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
xmlns:icon="https://github.com/nullsoftware/TrayIcon" 
xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding" 
xmlns:local="clr-namespace:SiteWatcher" 
xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" 
mc:Ignorable="d" Title="SiteWatcher" Height="450" Width="570" MaxWidth="570" MinWidth="570" MinHeight="80" WindowStyle="None">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Icons.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="Path">
                <Setter Property="Fill" Value="Gray"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                        <Setter Property="Fill" Value="Blue"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <BooleanToVisibilityConverter x:Key="BoolToVis"/>
            <local:ListWatchTagToStringConverter x:Key="WatchTagsToString"/>
            <local:CutLeftConverter x:Key="CutLeft"/>
            <sys:String x:Key="CutLeftMax">250-512</sys:String>
            <Style x:Key="StatusStyle" TargetType="TextBlock">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Status}" Value="4">
                        <Setter Property="Foreground" Value="SteelBlue"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Status}" Value="3">
                        <Setter Property="Foreground" Value="Blue"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Status}" Value="2">
                        <Setter Property="Foreground" Value="Green"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Status}" Value="-1">
                        <Setter Property="Foreground" Value="Red"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Status}" Value="1">
                        <Setter Property="Foreground" Value="Black"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Status}" Value="0">
                        <Setter Property="Foreground" Value="Gray"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="TextStyle" TargetType="TextBlock">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Status}" Value="0">
                        <Setter Property="Foreground" Value="Gray"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="HoverUnderline" TargetType="TextBlock">
                <Setter Property="Cursor" Value="Hand"></Setter>
                <Setter Property="TextDecorations" Value="Underline"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="TextDecorations" Value="None"/>
                    </Trigger>
                    <DataTrigger Binding="{Binding Status}" Value="2">
                        <Setter Property="Foreground" Value="Green"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Status}" Value="0">
                        <Setter Property="Foreground" Value="Gray"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Run">
                <Style.Triggers>
                    <Trigger Property="Tag" Value="{x:Static local:RunType.Delete}">
                        <Setter Property="Background" Value="LightPink"></Setter>
                        <Setter Property="TextDecorations" Value="Strikethrough"></Setter>
                    </Trigger>
                    <Trigger Property="Tag" Value="{x:Static local:RunType.Replace}">
                        <Setter Property="Background" Value="Gray"></Setter>
                        <Setter Property="TextDecorations" Value="Strikethrough"></Setter>
                    </Trigger>
                    <Trigger Property="Tag" Value="{x:Static local:RunType.Change}">
                        <Setter Property="Background" Value="LightBlue"></Setter>
                    </Trigger>
                    <Trigger Property="Tag" Value="{x:Static local:RunType.Add}">
                        <Setter Property="Background" Value="LightGreen"></Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <local:BindingProxy x:Key="Proxy" Data="{Binding}"></local:BindingProxy>
        </ResourceDictionary>
    </Window.Resources>
    <DockPanel>
        <DockPanel DockPanel.Dock="Top" Margin="5 0">
            <Border Background="Transparent" x:Name="Drag">
                <DockPanel>
                    <DockPanel.Resources>
                        <Style TargetType="Button">
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Margin" Value="5"/>
                            <Setter Property="Padding" Value="5 2"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Setter Property="DockPanel.Dock" Value="Right"/>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border Background="{TemplateBinding Background}">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Style TargetType="Border">
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="BorderBrush" Value="Silver"/>
                            <Setter Property="CornerRadius" Value="5"/>
                            <Setter Property="Margin" Value="2 5 2 5"/>
                            <Setter Property="Padding" Value="0 0 0 0"/>
                            <Setter Property="DockPanel.Dock" Value="Right"/>
                        </Style>
                        <Style x:Key="CloneBtn" TargetType="Button"
                            BasedOn="{StaticResource {x:Type Button}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=WatchList, Path=SelectedItem}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="ContentControl">
                            <Setter Property="Width" Value="24"/>
                            <Setter Property="Height" Value="24"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="Focusable" Value="false"/>
                        </Style>
                    </DockPanel.Resources>
                    <Button ToolTip="Свернуть" Command="{Binding CloseWindow}">
                        <ContentControl Content="{StaticResource IconClose}"/>
                    </Button>
                    <Button ToolTip="Настройки" Command="{Binding ConfigCommand}">
                        <ContentControl Content="{StaticResource IconSettings}"/>
                    </Button>
                    <Button ToolTip="Проверить все" Command="{Binding CheckAllCommand}">
                        <ContentControl Content="{StaticResource IconUpdate}"/>
                    </Button>
                    <Border>
                        <StackPanel Orientation="Horizontal">
                            <Button ToolTip="Добавить" Command="{Binding AddWatchCommand}">
                                <ContentControl Content="{StaticResource IconWatchAdd}"/>
                            </Button>
                            <Button Style="{StaticResource CloneBtn}" ToolTip="Дублировать" Command="{Binding CopyWatchCommand}" CommandParameter="{Binding ElementName=WatchList, Path=SelectedItem}">
                                <ContentControl Content="{StaticResource IconWatchClone}"/>
                            </Button>
                        </StackPanel>
                    </Border>
                    <Button ToolTip="Показать новые" Command="{Binding ShowNewCommand}">
                         <Button.Resources>
                            <Style TargetType="Path">
                                <Setter Property="Fill" Value="Gray"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowNew}" Value="True">
                                        <Setter Property="Fill" Value="Red"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Resources>
                        <ContentControl  Content="{StaticResource IconNew}"/>
                    </Button>
                    <StackPanel Orientation="Vertical" DockPanel.Dock="Left">
                        <TextBlock Text="{Binding Title, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" ToolTip="{Binding Source={x:Static local:Utils.Version}, StringFormat=SiteWatcher {0}}" FontSize="20" Margin="10 0" Foreground="Gray" VerticalAlignment="Center"></TextBlock>
                        <ComboBox x:Name="TagsList" IsEditable="True" FontSize="14" Margin="10 0" VerticalContentAlignment="Center" IsReadOnly="{c:Binding ShowNew}" ItemsSource="{Binding Tags}"><!-- Text="{Binding Tags, Converter={StaticResource WatchTagsToString},ConverterParameter=&apos;Все&apos;, Mode=OneWay}" -->
                            <ComboBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type local:WatchTag}">
                                    <CheckBox IsThreeState="True" VerticalContentAlignment="Center" Content="{c:Binding Name+\' (\'+Count+\')\'}" IsChecked="{Binding Selected}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ComboBoxItem}">
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                            <ComboBox.InputBindings>
                                <KeyBinding Key="Escape" Command="{Binding ClearFilterCommand}" />
                            </ComboBox.InputBindings>

                        </ComboBox>
                    </StackPanel>
                </DockPanel>
            </Border>
        </DockPanel>
        <DockPanel DockPanel.Dock="Bottom" Margin="5 5" Visibility="{Binding Trashed, Converter={StaticResource BoolToVis}}">
            <Button Command="{Binding UndeleteWatchCommand}">Восстановить</Button>
        </DockPanel>
        <ListView x:Name="WatchList" Margin="5 0" BorderThickness="0" ItemsSource="{Binding Watches}" ScrollViewer.CanContentScroll="False">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <DockPanel HorizontalAlignment="Stretch">
                        <DockPanel Width="105" DockPanel.Dock="Right" HorizontalAlignment="Right"><!-- <TextBlock Text="{Binding Diff.Next.Time, StringFormat='dd.MM.yyyy HH:mm'}" Style="{StaticResource StatusStyle}" FontSize="12" TextWrapping="NoWrap" DockPanel.Dock="Top" TextAlignment="Right"/> -->
                            <TextBlock Text="{Binding Diff.Next.Time, Converter={local:DateToNowRelevanceConverter}}" Style="{StaticResource StatusStyle}" FontSize="12" TextWrapping="NoWrap" DockPanel.Dock="Top" TextAlignment="Right"/>
                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" HorizontalAlignment="Right">
                                <StackPanel.Resources>
                                    <Style TargetType="Path">
                                        <Setter Property="Fill" Value="DarkRed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Border,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                                                <Setter Property="Fill" Value="Red"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Border,AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                                                <Setter Property="Fill" Value="Red"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </StackPanel.Resources>
                                <TextBlock Text="{Binding Status,Converter={local:WatchStatusToStringConverter}}" Style="{StaticResource StatusStyle}" TextWrapping="NoWrap" FontSize="14" HorizontalAlignment="Right" TextAlignment="Right"/>
                                <Border Background="Transparent" Visibility="{c:Binding &apos;Error!=\&apos;\&apos;&apos;}" Width="16" Height="16" Margin="5 0 0 0" ToolTip="{Binding Error}" ToolTipService.InitialShowDelay="0"> 
                                    <ContentControl VerticalContentAlignment="Center" Content="{StaticResource IconInfo}"/>
                                </Border>
                            </StackPanel>
                            <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Right">
                                <StackPanel.Resources>
                                    <Style TargetType="StackPanel">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem}, Path=IsMouseOver}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                    <Style TargetType="Button">
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Margin" Value="5 0 0 0"/>
                                        <Setter Property="Padding" Value="2"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Setter Property="Cursor" Value="Hand"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border Background="{TemplateBinding Background}">
                                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                    <Style TargetType="ContentControl">
                                        <Setter Property="Width" Value="16"/>
                                        <Setter Property="Height" Value="16"/>
                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                    </Style>
                                </StackPanel.Resources>
                                <Button Command="{Binding Source={StaticResource Proxy}, Path=Data.ToggleReadWatchCommand}" CommandParameter="{Binding .}">
                                    <ContentControl Content="{StaticResource IconEye}"/>
                                </Button>
                                <Button Command="{Binding Source={StaticResource Proxy}, Path=Data.EditWatchCommand}" CommandParameter="{Binding .}">
                                    <ContentControl Content="{StaticResource IconEdit}"/>
                                </Button>
                                <Button Command="{Binding Source={StaticResource Proxy}, Path=Data.CheckWatchCommand}" CommandParameter="{Binding .}">
                                    <ContentControl Content="{StaticResource IconUpdate}"/>
                                </Button>
                                <Button Command="{Binding Source={StaticResource Proxy}, Path=Data.DeleteWatchCommand}" CommandParameter="{Binding .}">
                                    <ContentControl Content="{StaticResource IconDelete}"/>
                                </Button>
                                <Button Command="{Binding Source={StaticResource Proxy}, Path=Data.ToggleWatchCommand}" CommandParameter="{Binding .}">
                                    <ContentControl Content="{StaticResource IconPower}"/>
                                </Button>
                            </StackPanel>
                        </DockPanel>
                        <Rectangle Width="32" Height="32" RadiusX="5" RadiusY="5" Margin="5" DockPanel.Dock="Left">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="{Binding Source.Url, Converter={local:UrlToFilenameConverter}}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <StackPanel Orientation="Vertical" VerticalAlignment="Center" Margin="5 0" DockPanel.Dock="Top" HorizontalAlignment="Left" Width="350">
<!--                             <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                                <TextBlock Text="{Binding Name}" FontWeight="Bold" FontSize="16" VerticalAlignment="Center">
                                    <TextBlock.InputBindings>
                                        <MouseBinding Gesture="LeftClick" Command="{Binding Source={StaticResource Proxy}, Path=Data.NavigateWatchCommand}" CommandParameter="{Binding}"/>
                                    </TextBlock.InputBindings>
                                </TextBlock>   
                                <TextBlock Text="{Binding Source.Url}" Margin="10 0 10 2" Foreground="Blue" TextDecorations="Underline" Cursor="Hand" VerticalAlignment="Bottom" TextTrimming="CharacterEllipsis">
                                    <TextBlock.InputBindings>
                                        <MouseBinding Gesture="LeftClick" Command="{Binding Source={StaticResource Proxy}, Path=Data.NavigateWatchCommand}" CommandParameter="{Binding}"/>
                                    </TextBlock.InputBindings>
                                </TextBlock>
                            </StackPanel> -->
                            <TextBlock Style="{StaticResource HoverUnderline}" Text="{Binding Name}" FontWeight="Bold" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Left">
                                <TextBlock.InputBindings>
                                    <MouseBinding Gesture="LeftClick" Command="{Binding Source={StaticResource Proxy}, Path=Data.NavigateWatchCommand}" CommandParameter="{Binding}"/>
                                </TextBlock.InputBindings>
                            </TextBlock>   
                            <TextBlock Style="{StaticResource TextStyle}" Text="{Binding Diff.Next, Converter={local:CutLeftConverter}, ConverterParameter={StaticResource CutLeftMax}}" TextWrapping="NoWrap" MaxHeight="30" HorizontalAlignment="Left"/>
                        </StackPanel>
                    </DockPanel>
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="Padding" Value="0 2"/><!-- <Setter Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"/> -->
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVis}}"/>
                    <Setter Property="ToolTipService.Placement" Value="Bottom" />
                    <Setter Property="ToolTip">
                        <Setter.Value>
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="Border" >
                                        <Setter Property="Padding" Value="5 0 5 0" />
                                    </Style>
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <DockPanel Grid.Row="0" Grid.ColumnSpan="3" Visibility="{c:Binding &apos;Comment!=\&apos;\&apos;&apos;, FalseToVisibility=Collapsed}">
                                <!-- Width="{Binding PlacementTarget.ActualWidth, RelativeSource={RelativeSource Self}}" -->
                                    <TextBlock DockPanel.Dock="Top" FontSize="14" Text="{Binding Comment}" Margin="0 0 0 5"/>
                                    <Separator DockPanel.Dock="Top" />
                                </DockPanel>
                                <StackPanel Grid.Row="2" Grid.Column="0">
                                    <TextBlock Text="{Binding Diff.Prev.Time,StringFormat=dd.MM.yyyy HH:mm}"/>
                                    <TextBlock Text="{Binding Diff.Prev, Converter={local:CutLeftConverter}, ConverterParameter={StaticResource CutLeftMax}}" MaxHeight="200" MaxWidth="300"/>
                                </StackPanel>
                                <Border Grid.Row="2" Grid.Column="1">
                                    <Canvas Height="40" Width="1">
                                        <Line
                                        X1="1" Y1="1"
                                        X2="1" Y2="40"
                                        Stroke="Gray"
                                        StrokeThickness="1"/>
                                    </Canvas>
                                </Border>
                                <StackPanel Grid.Row="2" Grid.Column="2">
                                    <TextBlock Text="{Binding Diff.Next.Time,StringFormat=dd.MM.yyyy HH:mm}"/>
                                    <ContentControl MaxHeight="200" MaxWidth="300"><!-- Content="{Binding Test, Converter={local:DiffTextConverter}, ConverterParameter={Binding TestOld}, Mode=OneTime}"> -->
                                        <MultiBinding Converter="{local:DiffTextOldToNewConverter}"><!-- &#x0a;&#x0d; -->
                                            <Binding Path="Diff.Prev.Text" Converter="{local:CutLeftConverter}" ConverterParameter="{StaticResource CutLeftMax}"/>
                                            <Binding Path="Diff.Next.Text" Converter="{local:CutLeftConverter}" ConverterParameter="{StaticResource CutLeftMax}"/>
                                        </MultiBinding>
                                    </ContentControl>
                                </StackPanel>                                
                            </Grid>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu>
                                <MenuItem Header="Проверить" Command="{Binding Source={StaticResource Proxy}, Path=Data.CheckWatchCommand}"></MenuItem>
                                <MenuItem Header="{c:Binding &apos;LastSeen &gt;= Diff.Next.Time ? \&apos;Отметить непрочитанным\&apos;:\&apos;Отметить прочитанным\&apos;&apos;}" Command="{Binding Source={StaticResource Proxy}, Path=Data.ToggleReadWatchCommand}" CommandParameter="{Binding .}"></MenuItem>
                                <MenuItem Header="История" Command="{Binding Source={StaticResource Proxy}, Path=Data.CheckpointsCommand}" CommandParameter="{Binding .}" FontWeight="Bold"></MenuItem>
                                <Separator/>
                                <MenuItem Header="Изменить" Command="{Binding Source={StaticResource Proxy}, Path=Data.EditWatchCommand}" CommandParameter="{Binding .}"></MenuItem>
                                <MenuItem Header="Дублировать" Command="{Binding Source={StaticResource Proxy}, Path=Data.CopyWatchCommand}" CommandParameter="{Binding .}"></MenuItem>
                                <MenuItem Header="Удалить" Command="{Binding Source={StaticResource Proxy}, Path=Data.DeleteWatchCommand}"></MenuItem>
                                <Separator/>
                                <MenuItem IsCheckable="True" IsChecked="{c:Binding &apos;Enabled&apos;}" Header="Включено"></MenuItem>
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListView.ItemContainerStyle>
            <ListView.Resources>
                <Style TargetType="ToolTip" x:Key="DiffStyle">
                    <Setter Property="Width" Value="{Binding PlacementTarget.ActualWidth, RelativeSource={RelativeSource Self}}" />
                </Style>
                <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Type ScrollBar}}">
                    <Style.Triggers>
                        <Trigger Property="Name" Value="PART_VerticalScrollBar">
                            <Setter Property="Margin" Value="0,18,0,0"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ListView.Resources>
        </ListView>
    </DockPanel>
</Window>